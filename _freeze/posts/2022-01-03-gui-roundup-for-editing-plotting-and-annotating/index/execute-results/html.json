{
  "hash": "c9481142a45e12de5176b16964050a5d",
  "result": {
    "markdown": "---\ntitle: \"GUI roundup for editing, plotting, and annotating\"\ndescription: |\n  A brief review of some graphical user interfaces (GUI's) for working with data in RStudio.\nauthor:\n  - name: Nathan Craig\n    url: https://ncraig.netlify.app/\ndate: 01-03-2022\ncategories:\n  - how-to\noutput:\n  distill::distill_article:\n    self_contained: false\n    # pandoc_args: [\"--number-sections\"]\n    # df_print: paged\n    toc: true\n    number_sections: false\nfrom: markdown+tex_math_single_backslash\nbibliography: references.bib\nlink-citations: yes\nrepository_url: https://github.com/n8craig/ncraig\ncreative_commons: CC BY-NC\n---\n\n\n# Introduction\n\n[![](https://i.imgur.com/lWPVIti.png)](https://youtu.be/cpbtcsGE0OA)\n\nDespite the fact that there are some valid arguments to be made that \"$$y$$ou can't do data science in a GUI,\" this post is a short roundup of some GUI's for R. The primary focus is on libraries that offer a GUI to `ggplot2` [@R-ggplot2] but a few other libraries related to data loading as well as plot annotation are also included. One of the big advantages of using R is keeping a record of how data are processed and presented. The instructions are written out in lines of code that use functions (*verbs*) to manipulate objects (*nouns*). Working this way exposes what takes place under a GUI and leaves a clear record of what was done. It is really useful for reproducibility [@implemen2014].\n\n![](https://i.imgur.com/PzhY14O.jpg) Source: [r/ProgrammerHumor](https://www.reddit.com/r/ProgrammerHumor/comments/g7ck8h/gui_vs_cli/)\n\n> 1)  Data science requires programming; a GUI does not provide the power necessary to tackle the creative challenges that data science requires.\n>\n> 2)  There are huge advantages to code, particularly when you see it as a medium of communication.\n>\n> 3)  R is a terrific environment for writing data analysis code. It has some quirky features as a programming language, but many of the quirks are well tailored to the problems of data science.\n>\n> 4)  Code should be primary artefact of any analysis, but **you might generate the code in ways apart from typing it on a keyboard**.\n>\n> -- Hadley Wickham 2018 \"You can't do data science in a GUI\" talk at the Association for Computing Machinery (emphasis added).\n\nWhile there are clear advantages to writing out commands as syntax, *visual*izations are *visual* meaning it is nice to interact with them *visual*ly. In that context, a GUI makes sense. I enjoy plotting things in R, writing it out line by line, but sometimes I want a really quick plot but don't want to load data into another program. Also, I really don't care for annotating figures via text commands, guessing at coordinates iteratively and rebuilding the figure until I get it correct. This approach is slow; I'd much prefer to click on the figure and move things around graphically--while retaining the ability to manipulate the underlying code that constructs the figure. Fortunately, R and RStudio permit this.\n\nOut of the tools reviewed here, my favorites right now are `esquisse` for plotting and `ggannotate` for annotations. Both tools:\n\n-   work with data sets or plots that are in the environment;\n-   produce R code output that can be pasted into R Markdown;\n-   can be used together by building a plot in `esquisse`, assigning it to a variable, and calling with `ggannotate` for final touch up.\n\n*These GUI's are not replacements for learning to write good code*. However, for people new to writing computer instructions, GUI's that return code can be helpful by providing some models that one can begin to tinker with. These GUI's are also useful for quickly putting together an exploratory plot. Lets load our libraries and get started.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# graphing library\nlibrary(ggplot2)\n\n# GUI's for ggplot\nlibrary(ggplotgui)\nlibrary(esquisse)\n\n# GUI's for annotation\nlibrary(ggannotate)\nlibrary(easylabel)\n\n# EDA\nlibrary(explore)\n```\n:::\n\n\n# Editing Data\n\nOften times data from the wild require tidying, transformation, and exploration. At these stages, looking at data is key. The RStudio viewer is really good for looking at data, but the [Data Viewer](https://support.rstudio.com/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE) is read only.\n\nWhen starting out in R, particularly if you are already accustomed to using spreadsheet software, it can be tricky to wrangle data in R with nothing but lines of code. This is where a GUI can help one get over some initial hurdles. Generally it is best practice to leave the original data unaltered and to define any transformations of changes in a script. For doing this, I often use some combination of `dplyr` functions like `mutate` along with `stringr` functions like `str_replace`. However, sometimes you just need to get in and tweak a value or two. Being able to do that right in RStudio is nice.\n\n[![](https://i.imgur.com/xpe84cW.png)](https://www.reddit.com/r/rstatsmemes/comments/cw4axj/trying_to_apply_a_fancy_new_r_library_to_my_real/)\n\nSource: [r/rstatmemes](https://www.reddit.com/r/rstatsmemes/comments/cw4axj/trying_to_apply_a_fancy_new_r_library_to_my_real/)\n\n## `DataEditR`\n\nThe [`DataEditR`](https://dillonhammill.github.io/DataEditR/index.html) library has been around since at least 2020, and though there seems to be a single contributor (Dillon Hammill who also contributes to `rhandsontable`, the library has 10 releases, and seems to be updated regularly. `DataEditR` is for viewing, entering, filtering, and editing data. Let's load some sample data from `ggplot2` that we can look at and manipulate in `DataEditR`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Call the data and assign to a df\ndata(mpg)\ndf <- mpg\n```\n:::\n\n\nOnce the library is installed, the GUI can be invoked in two ways:\n\n-   as an RStudio Addon, though this method does not seem to offer the full range of configuration options;\n\n-   or via function call submitted in the console with the command `data_edit(data, arguments`). There are a wide range of arguments that include exporting code and identifying the viewer.\n\n    -   eg: `DataEditR::data_edit(df,viewer = \"browser\")` opens the editor in the default browser window; this keeps RStudio free.\n\n    -   eg: `DataEditR::data_edit(df, code = TRUE)` opens the editor in the default RStudio dialogue and outputs code that reflects manipulations made in the GUI.\n\n-   It is possible to: select and edit columns and rows, drag to fill cells, copy and paste from external sources, implement check boxes or drop down lists, create read only columns, among other tasks.\n\n-   It is possible to either edit data frames in the environment or open an external file. To edit a dataframe in the environment, just type its name into the \"Data to edit:\" box.\n\nAny changes to the dataframe need to be saved to a file, as it does not look like changes get saved to the Environment. Changes to the table can be saved to a csv, but I have found it is good to check the output file before closing the GUI.\n\nFor more details on the library, consult both the [getting started](https://dillonhammill.github.io/DataEditR/articles/DataEditR.html) vignette and function [reference](https://dillonhammill.github.io/DataEditR/reference/index.html).\n\n## `rhandsontable`\n\nThe [`rhandsontable`](https://cran.r-project.org/web/packages/rhandsontable/index.html) library is an interface to the [Handsontable.js](https://handsontable.com/) Library. This library has been around for several years, there are 15 contributors, and the library is regularly maintained.\n\nOnce the `rhandsontable` library is installed, the GUI can be invoked from the RStudio Adins menu. This tool can operate on dataframes that are loaded into the environment or from an external file. I have not experimented much with `rhandsontable` and for the most part it looks to have been superseded by `DataEditR`.\n\n# Plotting\n\nThere are several GUI's for ggplot2 that can quickly render figures and provide code that can be further customized. Both `ggplotgui` and `esquisse` are handy and quick. I think `esquisse` is more powerful and being more actively developed, when I want a ggplot2 GUI it is what I use.\n\n## `esquisse`\n\nThe [`esquisse`](https://dreamrs.github.io/esquisse/) (French for \"*sketch\"*) library is part of the [dreamRs](https://www.dreamrs.fr/) group [@R-esquisse], there are eight contributors, and the project is currently being updated regularly. The GUI offers access to a wide range of functions and provides code output for further customization.\n\n-   The library can be installed from CRAN by `install.packages(\"esquisse\")`. Once the library is installed, the `esquisse` interface can be called from RStudio's Addins \"ggplot2 builder\" . Alternatively one can enter `esquisser()` into the R console to invoke the GUI. The interface is meant to be run interactively so `esquisser()` calls should not be placed in R Markdown code chunks.\n\n    ![](https://i.imgur.com/a3oGBma.png)\n\n-   With the GUI running, in the \"Import\" tab select a data source; in this case we'll pull up `mpg` loaded into the environment during a prior step. This dataset is part of `ggplot2`.\n\n    ![](https://i.imgur.com/XI0pkcO.png)\n\n-   Once the data are loaded, they can reviewed with the \"View\" tab and the column types modified in the \"Update\" tab; if modifying the column types be sure to click apply.\n\n-   Import the data by clicking \"Import\".\n\n-   Once imported, place variables in the appropriate X and Y slots; in this case,`hwy`in X and`cty`in Y with`cyl` in color.\n\n    ![](https://i.imgur.com/moyIeP1.png)\n\n-   Under \"Labels & Tile\" add some title text; we'll use the same one as above.\n\n    ![](https://i.imgur.com/6fkiASL.png)\n\n    ![](https://i.imgur.com/OKojUH9.png)\n\n-   To match the `ggplotgui` default (see below), we can set the theme; click \"Appearance\" and set the Theme to `bw`.\n\n    ![](https://i.imgur.com/q4dKjDk.png)\n\n-   Once the plot is set up as desired click the \"Code\" button and copy the code or insert it directly into the script.\n\n    ![](https://i.imgur.com/MHJ4juK.png)\n\nThe code below is pasted directly from `esquisse`. We set the options so the graph would look identical to the one produced by `ggplotgui`. notice how the code generated by `esquisse` is slightly different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot generated by esquisse\nggplot(mpg) +\n  aes(x = hwy, y = cty, colour = cyl) +\n  geom_point(shape = \"circle\", size = 1.5) +\n  scale_color_gradient() +\n  labs(title = \"My Awesome Title: cty by hwy colored by cyl\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/esquisse-output-1.png){width=672}\n:::\n:::\n\n\nThere are many other parameters that `esquisse` can modify. Pulling up the options exposes the full range of possibilities. I have not fully explored these.\n\n-   ![](https://i.imgur.com/QTtHKAY.png)\n\n## `ggplotgui`\n\nThe [`ggplotgui`](https://github.com/gertstulp/ggplotgui) library [@R-ggplotgui] was begun about five years ago and does not look to have been updated since 2020. It installed without issue and still works very well.\n\n-   Install: `remotes::install_github(\"mattcowgill/ggannotate\")`\n\n-   Call the GUI by sending the following to the R console `ggplot_shiny()`. This will open a shiny interface.\n\n    ![](https://i.imgur.com/Acicltr.png)\n\n-   With the GUI running either load sample data, upload a file, or paste data from the clipboard.\n\n-   With some data loaded, switch to the `ggplot` tab.\n\n    ![](https://i.imgur.com/N0GH0ei.png)\n\n-   Set the type of graph to `scatter`.\n\n-   Set the Y and X variables; here we use city and hwy respectively.\n\n-   Consider an optional grouping variable.\n\n    ![](https://i.imgur.com/ovCpwOi.png)\n\n-   Add a title by clicking the \"Change aesthetics\" section on the right; click the \"Text\" tab and then tick \"Add title\".\n\n    ![](https://i.imgur.com/JP0KsJY.png)\n\n-   Note other settings that can be changed to the left and right of the plot.\n\n-   Click the \"R-code\" tab and copy the necessary code; read the comments noting that there are four sections in the code.\n\n-   Copy the section that creates the graph and paste it into an R Markdown document.\n\n-   For the figure to work, the data for the graph need to be assigned to the variable the graph calls. In this case, `df`. We used the `mpg` dataset, so we call it and assign to `df`. See code chunk below; note that ggplotgui defaults to `theme_bw()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Call the data and assign to a df\ndata(mpg)\ndf <- mpg\n\n# Code from ggplotgui:\ngraph <- ggplot(df, aes(x = hwy, y = cty, colour = cyl)) +\n  geom_point() +\n  labs(x = 'hwy', y = 'cty') +\n  ggtitle('My Awesome Title: cty by hwy colored by cyl') +\n  theme_bw()\ngraph\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplotgui-output-1.png){width=672}\n:::\n:::\n\n\nCheck out the library \"[Get started with esquisse](https://cran.r-project.org/web/packages/esquisse/vignettes/get-started.html)\" vignette for more details.\n\n# Annotation\n\nAnnotation can be a very important part of telling a story with figures and plots, particularly if the graphical representation of a numerical series is being related to something else. For example, perhaps one is looking at the volume of TV coverage in relation to some events in the past. In such a case, annotating relevant events onto a plot of news coverage volume could help illustrate relationships between the timing, volume, and duration of that event's coverage in TV news. Placing annotation text on a plot is an aesthetic exercise and so a GUI is a good tool for the job.\n\n## `ggannotate`\n\nThe [`ggannotate`](https://github.com/MattCowgill/ggannotate) library began around 2000 [@R-ggannotate], there are two contributors, it appears relatively actively updated, and it is still experimental.\n\nThe interface is meant to be run interactively so `ggannotate` calls should not be placed in R Markdown code chunks. There are two ways to initiate a `ggannotate` session:\n\n1.  Paste the gall in the console. An example call to the library's interactive loading the graph example from above would be as follows: `ggannotate(graph)`.\n\n2.  Evoke the GUI via the RStudio Adins menu.\n\n    ![](https://i.imgur.com/ZmL5M7B.png)\n\n-   Use the GUI to create annotations, by clicking on the graph. Annotations can be built on several different layers and one can switch from layer to layer.\n\n    ![](https://i.imgur.com/NjLBCqc.png)\n\n-   Once the annotations are as desired click on \"Copy and Close\" then paste the annotations below the ggplot object. If there are multiple annotations, they are strung together with `+`. However, note that the tool does not seem to write very \"neat\" code in that the indentations are off. There may be a way to clean this up automatically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raw text copied from ggannotate\ngeom_curve(data = data.frame(x = 28.3606748882948, y = 12.5481425844177, xend = 28.9568379194368, yend = 17.745856135804),\nmapping = aes(x = x, y = y, xend = xend, yend = yend),\ncurvature = 0.305, arrow = arrow(30L, unit(0.1, \"inches\"),\n\"last\", \"closed\"),\ninherit.aes = FALSE) + \ngeom_text(data = data.frame(x = c(24.9029293076709, 30.6260944066346 ),\ny = c(12.2792953317598, 29.5751352527522),\nlabel = c(\"My second annotation\", \"My first annotation\")),\nmapping = aes(x = x, y = y, label = label),\ninherit.aes = FALSE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Graph object produced earlier\ngraph +\n  \n# Cleaned up code copied from ggannotate\n  geom_curve(\n    data = data.frame(x = 28.3606748882948, \n                      y = 12.5481425844177, \n                      xend = 28.9568379194368, \n                      yend = 17.745856135804),\n    mapping = aes(x = x, y = y, xend = xend, yend = yend),\n    curvature = 0.305, arrow = arrow(30L, unit(0.1, \"inches\"),\n                                     \"last\", \"closed\"),\n    inherit.aes = FALSE) + \n  geom_text(data = data.frame(x = c(24.9029293076709, 30.6260944066346 ),\n                              y = c(12.2792953317598, 29.5751352527522),\n                              label = c(\"My second annotation\", \"My first annotation\")),\n            mapping = aes(x = x, y = y, label = label),\n            inherit.aes = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggannotate-plot-1.png){width=672}\n:::\n:::\n\n\n## `easylabel`\n\nThe [`easylabel`](https://cran.r-project.org/web/packages/easylabel/index.html) library is for interactive labeling of plots [@R-easylabel]. It looks to have been published in 2021 and there were three [releases](https://cran.r-project.org/web/packages/easylabel/news/news.html) that year.\n\nThe `easylabel` GUI is interactive, so other than loading the library, calls to `easylabel` should not be placed in R Markdown documents.\n\n-   To evoke the `easylabel` interface, call if from the console.\n-   Calls to `easylabel` must be supplied with a dataframe, rather than a plot object.\n-   Data points are labeled by clicking on the point.\n-   The direction of the annotation can be set or individual labels can be dragged into position.\n\nAt present, the library only permits output as pdf or a plotly graph. The export to plotly option does not seem to provide the underlying code. This library looks potentially very useful, but right now for new R users does not appear to permit easy integration into R Markdown documents. `easylabel` is one I plan on watching.\n\n-   ![](https://i.imgur.com/7IMlUYL.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample code to evoke easylabel\neasylabel(df, x=\"hwy\", y = \"cty\",\n          colScheme = \"royalblue\")\n```\n:::\n\n\n# Exploratory Data Analysis\n\n## `explore`\n\nThe [`explore`](https://github.com/rolkra/explore)library has two contributors and was updated recently [@R-explore]. `explore` seeks to facilitate interactive exploratory data analysis. The library also offers four verbs to facilitate quick EDA: `explore`, `describe`, `explain`, `report`. I have not dug into these, but the GUI offers some very quick and useful feedback on data structure.\n\nThe GUI runs interactively and should not be placed into an R Markdown code chunk. Evoke the GUI by calling it in the console, and direct the call to a dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexplore(mpg)\n```\n:::\n\n\nFrom the GUI, the `report all` button generates a new HTML page with a wide range of graphs. The `explore` library has four helpful [vignettes](https://cran.r-project.org/web/packages/explore/index.html) showing different data sets. I found the [first vignette](https://cran.r-project.org/web/packages/explore/vignettes/explore.html) the most thorough and useful.\n\n-   ![](https://i.imgur.com/6UcxiAr.png)\n\nI think this can be a really useful tool for getting a first quick look or doing some probing. That is what it is built to do. Customizing and finalizing figures would require separate plotting.\n\n## `modelStudio`\n\nThe [`modelStudio`](https://modelstudio.drwhy.ai/articles/ms-perks-features.html) library is part of the [DrWhy.AI](https://github.com/ModelOriented/DrWhy) family of libraries. The focus of the larger project seems to be model prediction. I have not yet worked with these tools, but `modelStudio` offers a GUI for exploring models and provides a means to generate data dashboards. This is certainly something to look into.\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}