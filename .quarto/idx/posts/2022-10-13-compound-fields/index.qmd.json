{"title":"Dealing with compound fields","markdown":{"yaml":{"title":"Dealing with compound fields","abstract":"We have a table containing a compound field that is composed of multiple values separated by a delimeter. Here we are simulating data exported from PastPerfect museum catalog software. There are several such cases one might encounter: material, use, culture, etc.\n","author":"Nathan Craig","date":"2022-10-13","categories":["how-to","wrangling"],"format":{"html":{"df-print":"kable"}}},"headingText":"Load libraries","containsRefs":false,"markdown":"\n\nGenerally, it is not a good idea to put multiple values into a single table cell. This is not [tidy](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) and it is cumbersome to deal with fields so structured. However, given the constraints of some data entry systems, one may need to encode compound values to describe the observation. Suppose an individual is recording an object made of three materials but the data entry form only offers a single field (@fig-pp-input). We don't want to log just one value; we would rather capture all three materials. When confronted with such situations, people often enter some kind of delimited value like `apple/pear/orange` where `/` is the separator for three values. What follows is a way of dealing with this situation in R.\n\n![Past Perfect input screen with compound fields highlighted in red.](https://i.imgur.com/27byU9G.png){#fig-pp-input}\n\n```{r setup, echo=FALSE}\nknitr::opts_chunk$set(\n  message = FALSE,\n  warning = FALSE\n)\n```\n\n```{r libraries}\nlibrary(tidyverse)\nlibrary(stringi)\n\n```\n\n```{r tbl-make-df}\n#| tbl-cap: Sample dataframe.\n\n# Construct data frame\ndf <- data.frame(\n  id = 1:5,\n  material = c(\n    \"stone\",\n    \"stone/bone/sinew\",\n    \"ceramic/paint\",\n    \"metal/stone/bone/sinew/paint\",\n    NA\n  ),\n  location = \"NM\"\n)\n\ndf\n```\n\nNow we have a data frame where material contains entries representing more than one value. With `stringi` R can parse that complex string into a list.\n\n```{r string-split}\n# Split the string into a list\ndf$material <- str_split(df$material, \"/\")\n```\n\nIt is possible to access a given list item with `unlist()`. This can be done for individual records, ranges of records, or the entire column.\n\n```{r subset-unlist}\n\n# Get the list item from the second record\ndf[2,][,2]\n\n# Unpack the list associated with that record\nunlist(df[2,][,2])\n\n```\n\n```{r unlist-all}\n\n# Unpack the entire list column as a single list\nx <- unlist(df[,2])\nx\n```\n\nLet's turn the list of all values into its own data frame.\n```{r make-df-list}\ndf_x <- tibble(x)\n```\n\nTo see how many of each type of object we have, we can use `tidyverse` verbs to group by and summarize (@tbl-summarise).\n\n```{r tbl-summarise}\n#| tbl-cap: Counts by value extracted from a compound field.\ndf_x %>% group_by(x) %>% \n  summarize(n = n())\n```\nLet's search for a specific material and filter the table returning only records that meet the search criteria (@tbl-result).\n\n```{r tbl-result}\n#| tbl-cap: Primary table filtered based on presence of search string in compound field.\n\n# Test for the presence of a string\n# returns a TRUE/FALSE vector\na <- stri_detect_regex(df$material, \"stone\")\n\n# Get the numerical value of the record when TRUE\nb <- which(a == TRUE)\n\n# Call the rows based on the index\ndf[b,]\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"source","theme":"lux","mainfont":"Sorts Mill Goudy","title":"Dealing with compound fields","abstract":"We have a table containing a compound field that is composed of multiple values separated by a delimeter. Here we are simulating data exported from PastPerfect museum catalog software. There are several such cases one might encounter: material, use, culture, etc.\n","author":"Nathan Craig","date":"2022-10-13","categories":["how-to","wrangling"]},"extensions":{"book":{"multiFile":true}}}}}